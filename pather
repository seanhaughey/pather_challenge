#!/usr/bin/php
<?php
// get input file
$input = fopen($argv[1],"r") or die("Unable to open file");

// open output file
$output = fopen($argv[2], "w");

// convert input to string
$string = fread($input, filesize($argv[1]));

// set needed variables
$hash_markers = [];
$hash_loc = 0;
$hash_count = 0;

// convert string to array to use in height and width calculations
$arr = str_split($string);
$height = 0;

// determine the height of the rectangle by looking for whitespace at end of row
foreach ($arr as $value) {
	if ($value !== '.' and $value !== '#') {
		$height++;
	}
}

// determine the width of the rectangle
$width = count($arr)/$height;

// find hash locations and save to an array - exits loop when no more hashes are found (strpos = -1)
while ($hash_loc > -1) {
	$hash_loc = strpos($string, '#', $hash_loc);
	if ($hash_loc > -1) {
		array_push($hash_markers, $hash_loc);
		$hash_count++;
		$hash_loc++;
	}
}

// for loop runs for each hash character - total determined by the counter
for ($j = 0; $j < $hash_count-1; $j++) {

	// calculate vertical distance between the hashes
	$row1 = ceil($hash_markers[$j]/$width);
	$row2 = ceil($hash_markers[$j+1]/$width);

	// fixed instances where hash is first character in a row
	if ($hash_markers[$j] % $width == 0) {
		$row1++;
	}
	if ($hash_markers[$j+1] % $width == 0){
		$row2++;
	}
	$vertical = $row2 - $row1;

	// vertically replace only the dot characters with asterisks
	for ($i = 0; $i < $vertical; $i++) {
		$index = $hash_markers[$j] + $width;

		// conditional to fix edge case of overwriting hash character directly vertical from previous hash
		if ($string[$index] == '#') {
			$hash_markers[$j] += $width;
		} else {
			$hash_markers[$j] += $width;
			$string = substr_replace($string, '*', $hash_markers[$j], 1);		
		}
	}

	// calculate horizontal distance between the hashes
	$horizontal = $hash_markers[$j+1] - $hash_markers[$j];

	// if horizontal distance is positive replace dots with asterisks from left to right
	if ($horizontal > 0) {
		for ($i = 0; $i < $horizontal-1; $i++) {
			$string = substr_replace($string, '*', $hash_markers[$j]+1, 1);
			$hash_markers[$j] += 1;
		}

	// if horizontal distance is negative replace dots with asterisks from right to left
	} else {
		$horizontal = abs($horizontal);
		for ($i = $horizontal-1; $i > 0; $i--) {
			$string = substr_replace($string, '*', $hash_markers[$j]-1, 1);
			$hash_markers[$j] -= 1;			
		}
	}
}

// write the new string to output file and close
fwrite($output, $string);
fclose($output);

?>